"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/projects",{

/***/ "./src/content/projects.ts":
/*!*********************************!*\
  !*** ./src/content/projects.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   projects: function() { return /* binding */ projects; }\n/* harmony export */ });\n// src/content/projects.ts\n// 1. We define the type for a single project directly in this file.\n//    The conflicting import has been removed.\n// 2. We export the array of project data, typed with the 'Project' type we just defined.\nconst projects = [\n    {\n        \"title\": \"MDR-TB Risk Factors in Africa\",\n        \"description\": \"A machine learning project analyzing WHO data to identify key risk factors for multidrug-resistant tuberculosis (MDR-TB) in Africa. The Random Forest model achieved 86.6% accuracy, identifying HIV-positive TB cases as the most significant risk factor.\",\n        \"image\": \"/assets/images/projects/MDR-TB Risk Factors in Africa.png\",\n        \"tags\": [\n            \"Jupyter Notebook\",\n            \"Machine Learning\",\n            \"Data Analytics\",\n            \"Python\",\n            \"Infectious Diseases\",\n            \"Data Wrangling\",\n            \"Data Visualisation\"\n        ],\n        \"githubUrl\": \"https://github.com/BioCoder-hla/MDR-TB-Risk-Factors-in-Africa\"\n    },\n    {\n        \"title\": \"Smartphone Inventory & POS System\",\n        \"description\": \"A PHP-based web application for managing a smartphone shopâ€™s inventory, sales, and reporting. Features role-based user authentication, a point-of-sale (POS) interface, and detailed sales reporting with a responsive dark theme.\",\n        \"image\": \"/assets/images/projects/Smartphone Inventory & POS System.png\",\n        \"tags\": [\n            \"PHP\",\n            \"JavaScript\",\n            \"CSS\",\n            \"MySQL\",\n            \"HTML\",\n            \"SQL\"\n        ],\n        \"githubUrl\": \"https://github.com/BioCoder-hla/Smartphone-Inventory-POS-System\"\n    },\n    {\n        \"title\": \"Tuberculosis RNA-seq Analysis\",\n        \"description\": \"A bioinformatics pipeline in R for analyzing RNA-seq data (GEO: GSE107991) to understand TB progression. Includes preprocessing, differential expression analysis with edgeR, and functional enrichment using clusterProfiler to identify gene signatures and biomarkers.\",\n        \"image\": \"/assets/images/projects/Active_Control_volcano_plot.png\",\n        \"tags\": [\n            \"R\",\n            \"Bioinformatics\",\n            \"RNA-seq\",\n            \"edgeR\",\n            \"clusterProfiler\",\n            \"Infectious Diseases\"\n        ],\n        \"githubUrl\": \"https://github.com/BioCoder-hla/TB-RNAseq-Analysis\"\n    },\n    {\n        \"title\": \"Hospital Performance Intelligence Platform\",\n        \"description\": \"A full-stack healthcare analytics dashboard built with R, MySQL, Flask, and JavaScript. Transforms raw CMS hospital data into an interactive web platform to explore unplanned visit rates, visualize KPIs by state, and support data-driven decision making.\",\n        \"image\": \"/assets/images/projects/Hospital Performance Platform.png\",\n        \"tags\": [\n            \"R\",\n            \"Data wrangling\",\n            \"MySQL\",\n            \"SQL\",\n            \"Flask\",\n            \"Python\",\n            \"JavaScript\",\n            \"Data Visualization\",\n            \"Healthcare Data Analytics\",\n            \"Full Stack Web Development\"\n        ],\n        \"githubUrl\": \"https://github.com/BioCoder-hla/Hospital-Performance-Dashboard\"\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udGVudC9wcm9qZWN0cy50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMEJBQTBCO0FBRTFCLG9FQUFvRTtBQUNwRSw4Q0FBOEM7QUFVOUMseUZBQXlGO0FBQ2xGLE1BQU1BLFdBQXNCO0lBQ2hDO1FBQ0MsU0FBUztRQUNULGVBQWU7UUFDZixTQUFTO1FBQ1QsUUFBUTtZQUFDO1lBQW9CO1lBQW9CO1lBQWtCO1lBQVU7WUFBdUI7WUFBa0I7U0FBcUI7UUFDM0ksYUFBYTtJQUNmO0lBQ0E7UUFDRSxTQUFTO1FBQ1QsZUFBZTtRQUNmLFNBQVM7UUFDVCxRQUFRO1lBQUM7WUFBTztZQUFjO1lBQU87WUFBUztZQUFRO1NBQU07UUFDNUQsYUFBYTtJQUNmO0lBQ0E7UUFDRSxTQUFTO1FBQ1QsZUFBZTtRQUNmLFNBQVM7UUFDVCxRQUFRO1lBQUM7WUFBSztZQUFrQjtZQUFXO1lBQVM7WUFBbUI7U0FBc0I7UUFDN0YsYUFBYTtJQUNmO0lBQ0U7UUFDRixTQUFTO1FBQ1QsZUFBZTtRQUNmLFNBQVM7UUFDVCxRQUFRO1lBQUM7WUFBSztZQUFrQjtZQUFTO1lBQU87WUFBUztZQUFVO1lBQWM7WUFBc0I7WUFBNkI7U0FBNkI7UUFDakssYUFBYTtJQUNmO0NBRUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29udGVudC9wcm9qZWN0cy50cz9mODM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb250ZW50L3Byb2plY3RzLnRzXG5cbi8vIDEuIFdlIGRlZmluZSB0aGUgdHlwZSBmb3IgYSBzaW5nbGUgcHJvamVjdCBkaXJlY3RseSBpbiB0aGlzIGZpbGUuXG4vLyAgICBUaGUgY29uZmxpY3RpbmcgaW1wb3J0IGhhcyBiZWVuIHJlbW92ZWQuXG5leHBvcnQgdHlwZSBQcm9qZWN0ID0ge1xuICB0aXRsZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBpbWFnZTogc3RyaW5nOyAvLyBQYXRoIHRvIHRoZSBpbWFnZSBpbiBwdWJsaWMvYXNzZXRzL2ltYWdlcy9wcm9qZWN0c1xuICB0YWdzOiBzdHJpbmdbXTtcbiAgZ2l0aHViVXJsPzogc3RyaW5nOyAvLyBPcHRpb25hbFxuICBsaXZlVXJsPzogc3RyaW5nOyAgIC8vIE9wdGlvbmFsXG59O1xuXG4vLyAyLiBXZSBleHBvcnQgdGhlIGFycmF5IG9mIHByb2plY3QgZGF0YSwgdHlwZWQgd2l0aCB0aGUgJ1Byb2plY3QnIHR5cGUgd2UganVzdCBkZWZpbmVkLlxuZXhwb3J0IGNvbnN0IHByb2plY3RzOiBQcm9qZWN0W10gPSBbXG4gICB7XG4gICAgXCJ0aXRsZVwiOiBcIk1EUi1UQiBSaXNrIEZhY3RvcnMgaW4gQWZyaWNhXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbWFjaGluZSBsZWFybmluZyBwcm9qZWN0IGFuYWx5emluZyBXSE8gZGF0YSB0byBpZGVudGlmeSBrZXkgcmlzayBmYWN0b3JzIGZvciBtdWx0aWRydWctcmVzaXN0YW50IHR1YmVyY3Vsb3NpcyAoTURSLVRCKSBpbiBBZnJpY2EuIFRoZSBSYW5kb20gRm9yZXN0IG1vZGVsIGFjaGlldmVkIDg2LjYlIGFjY3VyYWN5LCBpZGVudGlmeWluZyBISVYtcG9zaXRpdmUgVEIgY2FzZXMgYXMgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgcmlzayBmYWN0b3IuXCIsXG4gICAgXCJpbWFnZVwiOiBcIi9hc3NldHMvaW1hZ2VzL3Byb2plY3RzL01EUi1UQiBSaXNrIEZhY3RvcnMgaW4gQWZyaWNhLnBuZ1wiLFxuICAgIFwidGFnc1wiOiBbXCJKdXB5dGVyIE5vdGVib29rXCIsIFwiTWFjaGluZSBMZWFybmluZ1wiLCBcIkRhdGEgQW5hbHl0aWNzXCIsIFwiUHl0aG9uXCIsIFwiSW5mZWN0aW91cyBEaXNlYXNlc1wiLCBcIkRhdGEgV3JhbmdsaW5nXCIsIFwiRGF0YSBWaXN1YWxpc2F0aW9uXCJdLFxuICAgIFwiZ2l0aHViVXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL0Jpb0NvZGVyLWhsYS9NRFItVEItUmlzay1GYWN0b3JzLWluLUFmcmljYVwiXG4gIH0sXG4gIHtcbiAgICBcInRpdGxlXCI6IFwiU21hcnRwaG9uZSBJbnZlbnRvcnkgJiBQT1MgU3lzdGVtXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgUEhQLWJhc2VkIHdlYiBhcHBsaWNhdGlvbiBmb3IgbWFuYWdpbmcgYSBzbWFydHBob25lIHNob3DigJlzIGludmVudG9yeSwgc2FsZXMsIGFuZCByZXBvcnRpbmcuIEZlYXR1cmVzIHJvbGUtYmFzZWQgdXNlciBhdXRoZW50aWNhdGlvbiwgYSBwb2ludC1vZi1zYWxlIChQT1MpIGludGVyZmFjZSwgYW5kIGRldGFpbGVkIHNhbGVzIHJlcG9ydGluZyB3aXRoIGEgcmVzcG9uc2l2ZSBkYXJrIHRoZW1lLlwiLFxuICAgIFwiaW1hZ2VcIjogXCIvYXNzZXRzL2ltYWdlcy9wcm9qZWN0cy9TbWFydHBob25lIEludmVudG9yeSAmIFBPUyBTeXN0ZW0ucG5nXCIsXG4gICAgXCJ0YWdzXCI6IFtcIlBIUFwiLCBcIkphdmFTY3JpcHRcIiwgXCJDU1NcIiwgXCJNeVNRTFwiLCBcIkhUTUxcIiwgXCJTUUxcIl0sXG4gICAgXCJnaXRodWJVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vQmlvQ29kZXItaGxhL1NtYXJ0cGhvbmUtSW52ZW50b3J5LVBPUy1TeXN0ZW1cIlxuICB9LFxuICB7XG4gICAgXCJ0aXRsZVwiOiBcIlR1YmVyY3Vsb3NpcyBSTkEtc2VxIEFuYWx5c2lzXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgYmlvaW5mb3JtYXRpY3MgcGlwZWxpbmUgaW4gUiBmb3IgYW5hbHl6aW5nIFJOQS1zZXEgZGF0YSAoR0VPOiBHU0UxMDc5OTEpIHRvIHVuZGVyc3RhbmQgVEIgcHJvZ3Jlc3Npb24uIEluY2x1ZGVzIHByZXByb2Nlc3NpbmcsIGRpZmZlcmVudGlhbCBleHByZXNzaW9uIGFuYWx5c2lzIHdpdGggZWRnZVIsIGFuZCBmdW5jdGlvbmFsIGVucmljaG1lbnQgdXNpbmcgY2x1c3RlclByb2ZpbGVyIHRvIGlkZW50aWZ5IGdlbmUgc2lnbmF0dXJlcyBhbmQgYmlvbWFya2Vycy5cIixcbiAgICBcImltYWdlXCI6IFwiL2Fzc2V0cy9pbWFnZXMvcHJvamVjdHMvQWN0aXZlX0NvbnRyb2xfdm9sY2Fub19wbG90LnBuZ1wiLFxuICAgIFwidGFnc1wiOiBbXCJSXCIsIFwiQmlvaW5mb3JtYXRpY3NcIiwgXCJSTkEtc2VxXCIsIFwiZWRnZVJcIiwgXCJjbHVzdGVyUHJvZmlsZXJcIiwgXCJJbmZlY3Rpb3VzIERpc2Vhc2VzXCJdLFxuICAgIFwiZ2l0aHViVXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL0Jpb0NvZGVyLWhsYS9UQi1STkFzZXEtQW5hbHlzaXNcIlxuICB9LFxuICAgIHtcbiAgXCJ0aXRsZVwiOiBcIkhvc3BpdGFsIFBlcmZvcm1hbmNlIEludGVsbGlnZW5jZSBQbGF0Zm9ybVwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiQSBmdWxsLXN0YWNrIGhlYWx0aGNhcmUgYW5hbHl0aWNzIGRhc2hib2FyZCBidWlsdCB3aXRoIFIsIE15U1FMLCBGbGFzaywgYW5kIEphdmFTY3JpcHQuIFRyYW5zZm9ybXMgcmF3IENNUyBob3NwaXRhbCBkYXRhIGludG8gYW4gaW50ZXJhY3RpdmUgd2ViIHBsYXRmb3JtIHRvIGV4cGxvcmUgdW5wbGFubmVkIHZpc2l0IHJhdGVzLCB2aXN1YWxpemUgS1BJcyBieSBzdGF0ZSwgYW5kIHN1cHBvcnQgZGF0YS1kcml2ZW4gZGVjaXNpb24gbWFraW5nLlwiLFxuICBcImltYWdlXCI6IFwiL2Fzc2V0cy9pbWFnZXMvcHJvamVjdHMvSG9zcGl0YWwgUGVyZm9ybWFuY2UgUGxhdGZvcm0ucG5nXCIsXG4gIFwidGFnc1wiOiBbXCJSXCIsIFwiRGF0YSB3cmFuZ2xpbmdcIiwgXCJNeVNRTFwiLCBcIlNRTFwiLCBcIkZsYXNrXCIsIFwiUHl0aG9uXCIsIFwiSmF2YVNjcmlwdFwiLCBcIkRhdGEgVmlzdWFsaXphdGlvblwiLCBcIkhlYWx0aGNhcmUgRGF0YSBBbmFseXRpY3NcIiwgXCJGdWxsIFN0YWNrIFdlYiBEZXZlbG9wbWVudFwiXSxcbiAgXCJnaXRodWJVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vQmlvQ29kZXItaGxhL0hvc3BpdGFsLVBlcmZvcm1hbmNlLURhc2hib2FyZFwiXG59XG5cbl07XG4iXSwibmFtZXMiOlsicHJvamVjdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/content/projects.ts\n"));

/***/ })

});